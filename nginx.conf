
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip  $GZIP;

    proxy_force_ranges on;
    proxy_cache_path /cache levels=1:2 keys_zone=my_cache:10m max_size=$MAX_SIZE
                    inactive=$MAX_INACTIVE use_temp_path=off;

    server {
        location / {
            resolver $NAMESERVER valid=10s;
            set $backend $UPSTREAM;
            proxy_pass $backend;
            proxy_cache my_cache;
            proxy_read_timeout $PROXY_READ_TIMEOUT;

            # Ignore cookies
            proxy_hide_header       Set-Cookie;
            proxy_ignore_headers    Set-Cookie;
            # important! Remember the special inheritance rules for proxy_set_header:
            # http://nginx.org/ru/docs/http/ngx_http_proxy_module.html#proxy_set_header
            proxy_set_header        Cookie "";

            # Define the cache key
            proxy_cache_key $scheme$proxy_host$request_uri;
        
            # Cache valid times
            proxy_cache_valid 200 301 302 10m;
            proxy_cache_valid 404 1m;

            # Enable background updates
            proxy_cache_background_update on;
        
            # Serve stale content while updating
            proxy_cache_use_stale updating error timeout invalid_header http_500 http_502 http_503 http_504;

            # Set headers for caching
            add_header X-Cache-Status $upstream_cache_status;


            add_header 'Access-Control-Allow-Origin' '$ALLOWED_ORIGIN';
        }
    }
}

